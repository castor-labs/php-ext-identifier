# Development Makefile for PHP Identifier Extension
# This provides convenient targets for development workflow

.PHONY: help build clean test install dev-setup format lint package validate

# Default target
help:
	@echo "PHP Identifier Extension - Development Makefile"
	@echo ""
	@echo "Available targets:"
	@echo "  build      - Build the extension"
	@echo "  clean      - Clean build artifacts"
	@echo "  test       - Run all tests"
	@echo "  install    - Install the extension"
	@echo "  dev-setup  - Set up development environment"
	@echo "  format     - Format C code (requires clang-format)"
	@echo "  lint       - Lint C code (requires cppcheck)"
	@echo "  package    - Create PECL package"
	@echo "  validate   - Validate package.xml"
	@echo "  help       - Show this help"

# Build the extension
build:
	@echo "Building PHP Identifier Extension..."
	phpize
	./configure --enable-identifier
	make

# Clean build artifacts
clean:
	@echo "Cleaning build artifacts..."
	make clean || true
	phpize --clean || true
	rm -f config.h config.h.in~ config.log config.nice config.status configure libtool
	rm -rf autom4te.cache/ .libs/ modules/
	rm -f Makefile Makefile.fragments Makefile.objects run-tests.php
	find . -name "*.lo" -delete
	find . -name "*.la" -delete
	find . -name "*.dep" -delete
	find tests/ -name "*.diff" -delete
	find tests/ -name "*.exp" -delete
	find tests/ -name "*.log" -delete
	find tests/ -name "*.out" -delete
	find tests/ -name "*.php" -delete
	find tests/ -name "*.sh" -delete

# Run tests
test: build
	@echo "Running tests..."
	make test

# Install the extension
install: build
	@echo "Installing extension..."
	sudo make install
	@echo "Add 'extension=identifier' to your php.ini"

# Set up development environment
dev-setup:
	@echo "Setting up development environment..."
	@which phpize > /dev/null || (echo "Error: phpize not found. Install php-dev package." && exit 1)
	@which gcc > /dev/null || (echo "Error: gcc not found. Install build-essential." && exit 1)
	@echo "Development environment ready!"

# Format C code (optional)
format:
	@if which clang-format > /dev/null; then \
		echo "Formatting C code..."; \
		find src/ -name "*.c" -o -name "*.h" | xargs clang-format -i; \
		echo "Code formatted!"; \
	else \
		echo "clang-format not found. Install it for code formatting."; \
	fi

# Lint C code (optional)
lint:
	@if which cppcheck > /dev/null; then \
		echo "Linting C code..."; \
		cppcheck --enable=all --suppress=missingIncludeSystem src/; \
	else \
		echo "cppcheck not found. Install it for code linting."; \
	fi

# Create PECL package
package:
	@echo "Creating PECL package..."
	@which pear > /dev/null || (echo "Error: pear not found. Install php-pear package." && exit 1)
	pear package package.xml

# Validate package.xml
validate:
	@echo "Validating package.xml..."
	@which pear > /dev/null || (echo "Error: pear not found. Install php-pear package." && exit 1)
	pear package-validate package.xml

# Quick development cycle
dev: clean build test
	@echo "Development cycle complete!"

# Memory check with valgrind (if available)
valgrind: build
	@if which valgrind > /dev/null; then \
		echo "Running tests with valgrind..."; \
		USE_ZEND_ALLOC=0 valgrind --leak-check=full php -dextension=modules/identifier.so -r "echo 'Memory check complete\n';"; \
	else \
		echo "valgrind not found. Install it for memory checking."; \
	fi
